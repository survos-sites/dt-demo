{% extends "base.html.twig" %}

{% block javascripts %}

    {{ parent() }}}
    <script type="module">
        import Dexie from 'dexie';

        var db = new Dexie('someDB');

        // db.delete().then (()=>db.open());

        db.version(1).stores({
            productTable: "++id,price,brand,category"
        });

        // Populate from AJAX:
        db.on('ready', function (db) {
            // on('ready') event will fire when database is open but
            // before any other queued operations start executing.
            // By returning a Promise from this event,
            // the framework will wait until promise completes before
            // resuming any queued database operations.
            // Let's start by using the count() method to detect if
            // database has already been populated.
            return db.productTable.count(function (count) {
                if (count > 0) {
                    console.log("Already populated");
                } else {
                    console.log("Database is empty. Populating from ajax call...");
                    // We want framework to continue waiting, so we encapsulate
                    // the ajax call in a Promise that we return here.
                    return new Promise(  (resolve, reject) => {
                        const response = loadData().then( (response) => {
                            console.log("Calling bulkAdd() to insert objects...", response);
                            console.assert(db);
                            return db.productTable.bulkAdd(response.products);
                        });
                    }).then(function (data) {
                        console.log("Got ajax response. We'll now add the objects.");
                        // By returning the a promise, framework will keep
                        // waiting for this promise to complete before resuming other
                        // db-operations.
                    }).then(function () {
                        console.log ("Done populating.");
                    });
                }
            });
        });

        db.productTable.count().then( c => document.getElementById('count').innerText = c);
        // Following operation will be queued until we're finished populating data:
        db.productTable.each(function (obj) {
            // When we come here, data is fully populated and we can log all objects.
            // console.log("Found object: " + JSON.stringify(obj));
        }).then(function () {
            console.log("Finished.");
        }).catch(function (error) {
            // In our each() callback above fails, OR db.open() fails due to any reason,
            // including our ajax call failed, this operation will fail and we will get
            // the error here!
            console.error(error.stack || error);
            // Note that we could also have caught it on db.open() but in this sample,
            // we show it here.
        });

        async function loadData() {
            let url = 'https://dummyjson.com/products';
            const response = await fetch(url);
            return await response.json();
        }

    </script>
{% endblock %}

{% block body %}
    Database has <span id="count">wating...</span> items.
{% endblock %}
